/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "complexnets"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "complexnets"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.2"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * input_file_arg;	/**< @brief Load a network from an input file.  */
  char * input_file_orig;	/**< @brief Load a network from an input file original value given at command line.  */
  const char *input_file_help; /**< @brief Load a network from an input file help description.  */
  const char *weighted_help; /**< @brief Specify if the input file is considered as a weighted graph help description.  */
  const char *erdos_help; /**< @brief Erdos-Renyi model help description.  */
  const char *barabasi_help; /**< @brief Barabasi-Albert model help description.  */
  const char *hot_help; /**< @brief Extended Hot model help description.  */
  const char *molloy_help; /**< @brief Molloy-Reed model help description.  */
  int n_arg;	/**< @brief Number of network nodes..  */
  char * n_orig;	/**< @brief Number of network nodes. original value given at command line.  */
  const char *n_help; /**< @brief Number of network nodes. help description.  */
  float p_arg;	/**< @brief Connection probability (only for Erdos-Renyi model)..  */
  char * p_orig;	/**< @brief Connection probability (only for Erdos-Renyi model). original value given at command line.  */
  const char *p_help; /**< @brief Connection probability (only for Erdos-Renyi model). help description.  */
  int m0_arg;	/**< @brief Initial number of nodes (only for Barabasi-Albert model). (default='10').  */
  char * m0_orig;	/**< @brief Initial number of nodes (only for Barabasi-Albert model). original value given at command line.  */
  const char *m0_help; /**< @brief Initial number of nodes (only for Barabasi-Albert model). help description.  */
  int m_arg;	/**< @brief Number of edges to attach from new node to existing nodes (Barabasi-Albert model). Number of edges in each new vertex (Extended Hot Model)..  */
  char * m_orig;	/**< @brief Number of edges to attach from new node to existing nodes (Barabasi-Albert model). Number of edges in each new vertex (Extended Hot Model). original value given at command line.  */
  const char *m_help; /**< @brief Number of edges to attach from new node to existing nodes (Barabasi-Albert model). Number of edges in each new vertex (Extended Hot Model). help description.  */
  float xi_arg;	/**< @brief Parameter used to select the neighbors for a new vertex (only for Extended Hot Model)..  */
  char * xi_orig;	/**< @brief Parameter used to select the neighbors for a new vertex (only for Extended Hot Model). original value given at command line.  */
  const char *xi_help; /**< @brief Parameter used to select the neighbors for a new vertex (only for Extended Hot Model). help description.  */
  int q_arg;	/**< @brief Number of edges added in the graph after of connect a vertex (only for Extended Hot Model)..  */
  char * q_orig;	/**< @brief Number of edges added in the graph after of connect a vertex (only for Extended Hot Model). original value given at command line.  */
  const char *q_help; /**< @brief Number of edges added in the graph after of connect a vertex (only for Extended Hot Model). help description.  */
  float r_arg;	/**< @brief Parameter user to selected the edges in the graph after connecting a vertex (only for Extended Hot Model)..  */
  char * r_orig;	/**< @brief Parameter user to selected the edges in the graph after connecting a vertex (only for Extended Hot Model). original value given at command line.  */
  const char *r_help; /**< @brief Parameter user to selected the edges in the graph after connecting a vertex (only for Extended Hot Model). help description.  */
  char * ks_arg;	/**< @brief Input file that specifies, for each K, how many nodes have that K..  */
  char * ks_orig;	/**< @brief Input file that specifies, for each K, how many nodes have that K. original value given at command line.  */
  const char *ks_help; /**< @brief Input file that specifies, for each K, how many nodes have that K. help description.  */
  int betweenness_arg;	/**< @brief Calculate betweenness of a given node.  */
  char * betweenness_orig;	/**< @brief Calculate betweenness of a given node original value given at command line.  */
  const char *betweenness_help; /**< @brief Calculate betweenness of a given node help description.  */
  int ddist_arg;	/**< @brief Calculate the degree distribution of a given node.  */
  char * ddist_orig;	/**< @brief Calculate the degree distribution of a given node original value given at command line.  */
  const char *ddist_help; /**< @brief Calculate the degree distribution of a given node help description.  */
  int clustering_arg;	/**< @brief Calculate the clustering coefficient of a given node.  */
  char * clustering_orig;	/**< @brief Calculate the clustering coefficient of a given node original value given at command line.  */
  const char *clustering_help; /**< @brief Calculate the clustering coefficient of a given node help description.  */
  int knn_arg;	/**< @brief Calculate the nearest neighbors degree of a given node.  */
  char * knn_orig;	/**< @brief Calculate the nearest neighbors degree of a given node original value given at command line.  */
  const char *knn_help; /**< @brief Calculate the nearest neighbors degree of a given node help description.  */
  int shell_arg;	/**< @brief Calculate the shell index of a given node.  */
  char * shell_orig;	/**< @brief Calculate the shell index of a given node original value given at command line.  */
  const char *shell_help; /**< @brief Calculate the shell index of a given node help description.  */
  char * output_file_arg;	/**< @brief Save the result function into the specified file.  */
  char * output_file_orig;	/**< @brief Save the result function into the specified file original value given at command line.  */
  const char *output_file_help; /**< @brief Save the result function into the specified file help description.  */
  const char *betweenness_output_help; /**< @brief Betweenness vs. Degree help description.  */
  const char *ddist_output_help; /**< @brief Degree distribution help description.  */
  int log_bin_arg;	/**< @brief Log-bin the output (only for Degree distribution).  */
  char * log_bin_orig;	/**< @brief Log-bin the output (only for Degree distribution) original value given at command line.  */
  const char *log_bin_help; /**< @brief Log-bin the output (only for Degree distribution) help description.  */
  const char *clustering_output_help; /**< @brief Clustering coefficient vs. Degree help description.  */
  const char *knn_output_help; /**< @brief Nearest Neighbors Degree vs. Degree help description.  */
  const char *shell_output_help; /**< @brief Shell index vs. Degree help description.  */
  char * save_arg;	/**< @brief Save the current graph in the specified file..  */
  char * save_orig;	/**< @brief Save the current graph in the specified file. original value given at command line.  */
  const char *save_help; /**< @brief Save the current graph in the specified file. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int input_file_given ;	/**< @brief Whether input-file was given.  */
  unsigned int weighted_given ;	/**< @brief Whether weighted was given.  */
  unsigned int erdos_given ;	/**< @brief Whether erdos was given.  */
  unsigned int barabasi_given ;	/**< @brief Whether barabasi was given.  */
  unsigned int hot_given ;	/**< @brief Whether hot was given.  */
  unsigned int molloy_given ;	/**< @brief Whether molloy was given.  */
  unsigned int n_given ;	/**< @brief Whether n was given.  */
  unsigned int p_given ;	/**< @brief Whether p was given.  */
  unsigned int m0_given ;	/**< @brief Whether m0 was given.  */
  unsigned int m_given ;	/**< @brief Whether m was given.  */
  unsigned int xi_given ;	/**< @brief Whether xi was given.  */
  unsigned int q_given ;	/**< @brief Whether q was given.  */
  unsigned int r_given ;	/**< @brief Whether r was given.  */
  unsigned int ks_given ;	/**< @brief Whether ks was given.  */
  unsigned int betweenness_given ;	/**< @brief Whether betweenness was given.  */
  unsigned int ddist_given ;	/**< @brief Whether ddist was given.  */
  unsigned int clustering_given ;	/**< @brief Whether clustering was given.  */
  unsigned int knn_given ;	/**< @brief Whether knn was given.  */
  unsigned int shell_given ;	/**< @brief Whether shell was given.  */
  unsigned int output_file_given ;	/**< @brief Whether output-file was given.  */
  unsigned int betweenness_output_given ;	/**< @brief Whether betweenness-output was given.  */
  unsigned int ddist_output_given ;	/**< @brief Whether ddist-output was given.  */
  unsigned int log_bin_given ;	/**< @brief Whether log-bin was given.  */
  unsigned int clustering_output_given ;	/**< @brief Whether clustering-output was given.  */
  unsigned int knn_output_given ;	/**< @brief Whether knn-output was given.  */
  unsigned int shell_output_given ;	/**< @brief Whether shell-output was given.  */
  unsigned int save_given ;	/**< @brief Whether save was given.  */

  int analysis_group_counter; /**< @brief Counter for group analysis */
  int model_group_counter; /**< @brief Counter for group model */
  int network_load_group_counter; /**< @brief Counter for group network_load */
  int output_group_counter; /**< @brief Counter for group output */
  int save_group_counter; /**< @brief Counter for group save */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
